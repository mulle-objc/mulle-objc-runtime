{
   project =
   {
      description="‚è© A fast, portable Objective-C runtime written 100% in C11";
      domain="github";
      name="mulle-objc-runtime";
      user="mulle-objc";
      repo="mulle-objc-runtime";
      homepage="https://github.com/mulle-objc/mulle-objc-runtime";
      license="BSD-3-Clause"
   };
   dependencies =
   (
      {
         description="üì∂ A lock- and wait-free hashtable (and an array too), written in C";
         domain="github";
         name="mulle-concurrent";
         repo="mulle-concurrent";
         url="https://github.com/mulle-concurrent/mulle-concurrent";
         user="mulle-concurrent";
      },
      {
         description=" ‚è™ Access variable arguments in struct layout fashion in C";
         domain="github";
         name="mulle-vararg";
         repo="mulle-vararg";
         url="https://github.com/mulle-c/mulle-vararg";
         user="mulle-c";
      },
      {
         description="ü§±üèº Compatibility library for deterministic initializers";
         domain="github";
         name="mulle-atinit";
         repo="mulle-atinit";
         url="https://github.com/mulle-core/mulle-atinit";
         user="mulle-core";
      },
      {
         description="üëº Compatibility library to fix atexit";
         domain="github";
         name="mulle-atexit";
         repo="mulle-atexit";
         url="https://github.com/mulle-core/mulle-atexit";
         user="mulle-core";
      },
      {
         description="‚ôøÔ∏è Shared library helper";
         domain="github";
         name="mulle-dlfcn";
         repo="mulle-dlfcn";
         url="https://github.com/mulle-core/mulle-dlfcn";
         user="mulle-core";
      },
      {
         description="#Ô∏è‚É£ A collection of hash functions";
         domain="github";
         name="mulle-data";
         repo="mulle-data";
         url="https://github.com/mulle-c/mulle-data";
         user="mulle-c";
      }
   )
}
